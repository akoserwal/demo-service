// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v5.27.1
// source: testdomain/v1/demo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDemoserviceCreateDemo = "/api.testdomain.v1.Demoservice/CreateDemo"
const OperationDemoserviceDeleteDemo = "/api.testdomain.v1.Demoservice/DeleteDemo"
const OperationDemoserviceGetDemo = "/api.testdomain.v1.Demoservice/GetDemo"
const OperationDemoserviceListDemo = "/api.testdomain.v1.Demoservice/ListDemo"

type DemoserviceHTTPServer interface {
	CreateDemo(context.Context, *CreateDemoRequest) (*CreateDemoReply, error)
	DeleteDemo(context.Context, *DeleteDemoRequest) (*DeleteDemoReply, error)
	GetDemo(context.Context, *GetDemoRequest) (*GetDemoReply, error)
	ListDemo(context.Context, *ListDemoRequest) (*ListDemoReply, error)
}

func RegisterDemoserviceHTTPServer(s *http.Server, srv DemoserviceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/testdomain/v1/demo", _Demoservice_CreateDemo0_HTTP_Handler(srv))
	r.DELETE("/api/testdomain/v1/demo", _Demoservice_DeleteDemo0_HTTP_Handler(srv))
	r.GET("/api/testdomain/v1/demo/{name}", _Demoservice_GetDemo0_HTTP_Handler(srv))
	r.GET("/api/testdomain/v1/demo", _Demoservice_ListDemo0_HTTP_Handler(srv))
}

func _Demoservice_CreateDemo0_HTTP_Handler(srv DemoserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDemoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoserviceCreateDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDemo(ctx, req.(*CreateDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Demoservice_DeleteDemo0_HTTP_Handler(srv DemoserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoserviceDeleteDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDemo(ctx, req.(*DeleteDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Demoservice_GetDemo0_HTTP_Handler(srv DemoserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoserviceGetDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDemo(ctx, req.(*GetDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDemoReply)
		return ctx.Result(200, reply)
	}
}

func _Demoservice_ListDemo0_HTTP_Handler(srv DemoserviceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDemoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDemoserviceListDemo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDemo(ctx, req.(*ListDemoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDemoReply)
		return ctx.Result(200, reply)
	}
}

type DemoserviceHTTPClient interface {
	CreateDemo(ctx context.Context, req *CreateDemoRequest, opts ...http.CallOption) (rsp *CreateDemoReply, err error)
	DeleteDemo(ctx context.Context, req *DeleteDemoRequest, opts ...http.CallOption) (rsp *DeleteDemoReply, err error)
	GetDemo(ctx context.Context, req *GetDemoRequest, opts ...http.CallOption) (rsp *GetDemoReply, err error)
	ListDemo(ctx context.Context, req *ListDemoRequest, opts ...http.CallOption) (rsp *ListDemoReply, err error)
}

type DemoserviceHTTPClientImpl struct {
	cc *http.Client
}

func NewDemoserviceHTTPClient(client *http.Client) DemoserviceHTTPClient {
	return &DemoserviceHTTPClientImpl{client}
}

func (c *DemoserviceHTTPClientImpl) CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...http.CallOption) (*CreateDemoReply, error) {
	var out CreateDemoReply
	pattern := "/api/testdomain/v1/demo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDemoserviceCreateDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DemoserviceHTTPClientImpl) DeleteDemo(ctx context.Context, in *DeleteDemoRequest, opts ...http.CallOption) (*DeleteDemoReply, error) {
	var out DeleteDemoReply
	pattern := "/api/testdomain/v1/demo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemoserviceDeleteDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DemoserviceHTTPClientImpl) GetDemo(ctx context.Context, in *GetDemoRequest, opts ...http.CallOption) (*GetDemoReply, error) {
	var out GetDemoReply
	pattern := "/api/testdomain/v1/demo/{name}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemoserviceGetDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DemoserviceHTTPClientImpl) ListDemo(ctx context.Context, in *ListDemoRequest, opts ...http.CallOption) (*ListDemoReply, error) {
	var out ListDemoReply
	pattern := "/api/testdomain/v1/demo"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDemoserviceListDemo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
