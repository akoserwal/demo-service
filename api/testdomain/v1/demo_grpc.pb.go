// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: testdomain/v1/demo.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Demoservice_CreateDemo_FullMethodName = "/api.testdomain.v1.Demoservice/CreateDemo"
	Demoservice_UpdateDemo_FullMethodName = "/api.testdomain.v1.Demoservice/UpdateDemo"
	Demoservice_DeleteDemo_FullMethodName = "/api.testdomain.v1.Demoservice/DeleteDemo"
	Demoservice_GetDemo_FullMethodName    = "/api.testdomain.v1.Demoservice/GetDemo"
	Demoservice_ListDemo_FullMethodName   = "/api.testdomain.v1.Demoservice/ListDemo"
)

// DemoserviceClient is the client API for Demoservice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoserviceClient interface {
	CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...grpc.CallOption) (*CreateDemoReply, error)
	UpdateDemo(ctx context.Context, in *UpdateDemoRequest, opts ...grpc.CallOption) (*UpdateDemoReply, error)
	DeleteDemo(ctx context.Context, in *DeleteDemoRequest, opts ...grpc.CallOption) (*DeleteDemoReply, error)
	GetDemo(ctx context.Context, in *GetDemoRequest, opts ...grpc.CallOption) (*GetDemoReply, error)
	ListDemo(ctx context.Context, in *ListDemoRequest, opts ...grpc.CallOption) (*ListDemoReply, error)
}

type demoserviceClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoserviceClient(cc grpc.ClientConnInterface) DemoserviceClient {
	return &demoserviceClient{cc}
}

func (c *demoserviceClient) CreateDemo(ctx context.Context, in *CreateDemoRequest, opts ...grpc.CallOption) (*CreateDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateDemoReply)
	err := c.cc.Invoke(ctx, Demoservice_CreateDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoserviceClient) UpdateDemo(ctx context.Context, in *UpdateDemoRequest, opts ...grpc.CallOption) (*UpdateDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateDemoReply)
	err := c.cc.Invoke(ctx, Demoservice_UpdateDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoserviceClient) DeleteDemo(ctx context.Context, in *DeleteDemoRequest, opts ...grpc.CallOption) (*DeleteDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDemoReply)
	err := c.cc.Invoke(ctx, Demoservice_DeleteDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoserviceClient) GetDemo(ctx context.Context, in *GetDemoRequest, opts ...grpc.CallOption) (*GetDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDemoReply)
	err := c.cc.Invoke(ctx, Demoservice_GetDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoserviceClient) ListDemo(ctx context.Context, in *ListDemoRequest, opts ...grpc.CallOption) (*ListDemoReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListDemoReply)
	err := c.cc.Invoke(ctx, Demoservice_ListDemo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DemoserviceServer is the server API for Demoservice service.
// All implementations must embed UnimplementedDemoserviceServer
// for forward compatibility.
type DemoserviceServer interface {
	CreateDemo(context.Context, *CreateDemoRequest) (*CreateDemoReply, error)
	UpdateDemo(context.Context, *UpdateDemoRequest) (*UpdateDemoReply, error)
	DeleteDemo(context.Context, *DeleteDemoRequest) (*DeleteDemoReply, error)
	GetDemo(context.Context, *GetDemoRequest) (*GetDemoReply, error)
	ListDemo(context.Context, *ListDemoRequest) (*ListDemoReply, error)
	mustEmbedUnimplementedDemoserviceServer()
}

// UnimplementedDemoserviceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDemoserviceServer struct{}

func (UnimplementedDemoserviceServer) CreateDemo(context.Context, *CreateDemoRequest) (*CreateDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDemo not implemented")
}
func (UnimplementedDemoserviceServer) UpdateDemo(context.Context, *UpdateDemoRequest) (*UpdateDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDemo not implemented")
}
func (UnimplementedDemoserviceServer) DeleteDemo(context.Context, *DeleteDemoRequest) (*DeleteDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDemo not implemented")
}
func (UnimplementedDemoserviceServer) GetDemo(context.Context, *GetDemoRequest) (*GetDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDemo not implemented")
}
func (UnimplementedDemoserviceServer) ListDemo(context.Context, *ListDemoRequest) (*ListDemoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDemo not implemented")
}
func (UnimplementedDemoserviceServer) mustEmbedUnimplementedDemoserviceServer() {}
func (UnimplementedDemoserviceServer) testEmbeddedByValue()                     {}

// UnsafeDemoserviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoserviceServer will
// result in compilation errors.
type UnsafeDemoserviceServer interface {
	mustEmbedUnimplementedDemoserviceServer()
}

func RegisterDemoserviceServer(s grpc.ServiceRegistrar, srv DemoserviceServer) {
	// If the following call pancis, it indicates UnimplementedDemoserviceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Demoservice_ServiceDesc, srv)
}

func _Demoservice_CreateDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoserviceServer).CreateDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demoservice_CreateDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoserviceServer).CreateDemo(ctx, req.(*CreateDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demoservice_UpdateDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoserviceServer).UpdateDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demoservice_UpdateDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoserviceServer).UpdateDemo(ctx, req.(*UpdateDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demoservice_DeleteDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoserviceServer).DeleteDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demoservice_DeleteDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoserviceServer).DeleteDemo(ctx, req.(*DeleteDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demoservice_GetDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoserviceServer).GetDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demoservice_GetDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoserviceServer).GetDemo(ctx, req.(*GetDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demoservice_ListDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDemoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoserviceServer).ListDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Demoservice_ListDemo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoserviceServer).ListDemo(ctx, req.(*ListDemoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Demoservice_ServiceDesc is the grpc.ServiceDesc for Demoservice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demoservice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.testdomain.v1.Demoservice",
	HandlerType: (*DemoserviceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDemo",
			Handler:    _Demoservice_CreateDemo_Handler,
		},
		{
			MethodName: "UpdateDemo",
			Handler:    _Demoservice_UpdateDemo_Handler,
		},
		{
			MethodName: "DeleteDemo",
			Handler:    _Demoservice_DeleteDemo_Handler,
		},
		{
			MethodName: "GetDemo",
			Handler:    _Demoservice_GetDemo_Handler,
		},
		{
			MethodName: "ListDemo",
			Handler:    _Demoservice_ListDemo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "testdomain/v1/demo.proto",
}
